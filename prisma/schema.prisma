// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(STUDENT)
  studentId String?  @unique
  class     String?
  phone     String?
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  borrowedBooks BookBorrow[]
  favorites     BookFavorite[]
  ratings       BookRating[]
  reviews       BookReview[]
  Bookmark      Bookmark[]
  Notification  Notification[]
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

model Book {
  id              String   @id @default(cuid())
  title           String
  author          String
  isbn            String?  @unique
  publisher       String?
  publishYear     Int?
  pages           Int?
  language        String   @default("Indonesia")
  description     String?
  categoryId      String
  coverImage      String?
  fileUrl         String?
  isAvailable     Boolean  @default(true)
  totalCopies     Int      @default(1)
  availableCopies Int      @default(1)
  views           Int      @default(0)
  downloads       Int      @default(0)
  rating          Float    @default(0)
  ratingCount     Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  category      Category       @relation(fields: [categoryId], references: [id])
  borrowedBooks BookBorrow[]
  favorites     BookFavorite[]
  ratings       BookRating[]
  reviews       BookReview[]
  bookmarks     Bookmark[]
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  icon        String?
  bookCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  books Book[]
}

model BookBorrow {
  id         String       @id @default(cuid())
  userId     String
  bookId     String
  borrowDate DateTime     @default(now())
  dueDate    DateTime
  returnDate DateTime?
  status     BorrowStatus @default(ACTIVE)
  fine       Int          @default(0)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])

  @@unique([userId, bookId, borrowDate])
}

enum BorrowStatus {
  ACTIVE
  RETURNED
  OVERDUE
  LOST
}

model BookFavorite {
  id        String   @id @default(cuid())
  userId    String
  bookId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])

  @@unique([userId, bookId])
}

model BookRating {
  id        String   @id @default(cuid())
  userId    String
  bookId    String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])

  @@unique([userId, bookId])
}

model BookReview {
  id         String   @id @default(cuid())
  userId     String
  bookId     String
  rating     Int
  title      String
  content    String
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])

  @@unique([userId, bookId])
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  bookId    String
  page      Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])

  @@unique([userId, bookId])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  relatedId String?
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id])
}

enum NotificationType {
  BORROW_DUE
  OVERDUE
  NEW_BOOK
  SYSTEM
  REMINDER
}
